{"ast":null,"code":"import axios from \"axios\";\nimport { USER_LOADED, USER_LOADING, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT_SUCCESS, REGISTER_SUCCESS, REGISTER_FAIL } from \"./types\";\nimport { endpoint } from \"../endpoint\"; //Cheak Token and load user\n\nexport const loadUser = () => (dispatch, getState) => {\n  //User Loading\n  dispatch({\n    type: USER_LOADING\n  });\n  axios.get(\"\".concat(endpoint, \"/api/auth/user\"), tokenConfig(getState)).then(res => {\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n  }).catch(err => {\n    dispatch({\n      type: AUTH_ERROR\n    });\n  });\n};\nexport const login = (username, password) => dispatch => {\n  // Headers\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  }; // Request Body\n\n  const body = JSON.stringify({\n    username,\n    password\n  });\n  console.log(body);\n  axios.post(\"\".concat(endpoint, \"//api/auth/login\"), body, config).then(res => {\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n  }).catch(err => {\n    const errors = {\n      msg: err.response.data,\n      status: err.response.status\n    };\n    dispatch({\n      type: LOGIN_FAIL,\n      payload: errors\n    });\n  });\n}; //REGISTER\n\nexport const profileRegister = ({\n  username,\n  email,\n  password,\n  post,\n  firstName,\n  lastName,\n  phoneNo,\n  address,\n  country,\n  state,\n  policeStationRange,\n  district,\n  workState,\n  workPoliceStationRange,\n  workDistrict\n}) => (dispatch, getState) => {\n  // Request Body\n  const body = JSON.stringify({\n    username,\n    email,\n    password,\n    post,\n    firstName,\n    lastName,\n    phoneNo,\n    address,\n    country,\n    state,\n    policeStationRange,\n    district,\n    workState,\n    workPoliceStationRange,\n    workDistrict\n  });\n  console.log(body);\n  axios.post(\"https://store-our.herokuapp.com/api/auth/profileRegister\", body, tokenConfig(getState)).then(res => {\n    console.log(res);\n    dispatch({\n      type: REGISTER_SUCCESS\n    });\n  }).catch(err => {\n    const errors = {\n      msg: err.response.data,\n      status: err.response.status\n    };\n    dispatch({\n      type: REGISTER_FAIL,\n      payload: errors\n    });\n  });\n}; //LOGOUT\n\nexport const logout = () => (dispatch, getState) => {\n  axios.post(\"https://store-our.herokuapp.com/api/auth/logout\", null, tokenConfig(getState)).then(res => {\n    dispatch({\n      type: LOGOUT_SUCCESS,\n      payload: res.data\n    });\n  }).catch(err => {\n    console.log(err);\n  });\n};\nexport const tokenConfig = getState => {\n  //GET TOKEN FROM STATE\n  const token = getState().auth.token; //Headers\n\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  }; //if token , add to header config\n\n  if (token) {\n    config.headers[\"Authorization\"] = \"Token \".concat(token);\n  }\n\n  return config;\n};","map":{"version":3,"sources":["/Users/puneet/Documents/projects/storeApp/frontend/src/actions/auth.js"],"names":["axios","USER_LOADED","USER_LOADING","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT_SUCCESS","REGISTER_SUCCESS","REGISTER_FAIL","endpoint","loadUser","dispatch","getState","type","get","tokenConfig","then","res","payload","data","catch","err","login","username","password","config","headers","body","JSON","stringify","console","log","post","errors","msg","response","status","profileRegister","email","firstName","lastName","phoneNo","address","country","state","policeStationRange","district","workState","workPoliceStationRange","workDistrict","logout","token","auth"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\nimport {\r\n  USER_LOADED,\r\n  USER_LOADING,\r\n  AUTH_ERROR,\r\n  LOGIN_SUCCESS,\r\n  LOGIN_FAIL,\r\n  LOGOUT_SUCCESS,\r\n  REGISTER_SUCCESS,\r\n  REGISTER_FAIL\r\n} from \"./types\";\r\nimport { endpoint } from \"../endpoint\"\r\n\r\n//Cheak Token and load user\r\nexport const loadUser = () => (dispatch, getState) => {\r\n  //User Loading\r\n  dispatch({ type: USER_LOADING });\r\n\r\n  axios\r\n    .get(`${endpoint}/api/auth/user`, tokenConfig(getState))\r\n    .then(res => {\r\n      dispatch({\r\n        type: USER_LOADED,\r\n        payload: res.data\r\n      });\r\n    })\r\n    .catch(err => {\r\n      dispatch({\r\n        type: AUTH_ERROR\r\n      });\r\n    });\r\n};\r\n\r\nexport const login = (username, password) => dispatch => {\r\n  // Headers\r\n  const config = {\r\n    headers: {\r\n      \"Content-Type\": \"application/json\"\r\n    }\r\n  };\r\n\r\n  // Request Body\r\n  const body = JSON.stringify({ username, password });\r\n  console.log(body);\r\n\r\n  axios\r\n    .post(`${endpoint}//api/auth/login`, body, config)\r\n    .then(res => {\r\n      dispatch({\r\n        type: LOGIN_SUCCESS,\r\n        payload: res.data\r\n      });\r\n    })\r\n    .catch(err => {\r\n      const errors = {\r\n        msg: err.response.data,\r\n        status: err.response.status\r\n      };\r\n      dispatch({\r\n        type: LOGIN_FAIL,\r\n        payload: errors\r\n      });\r\n    });\r\n};\r\n\r\n//REGISTER\r\nexport const profileRegister = ({\r\n  username,\r\n  email,\r\n  password,\r\n  post,\r\n  firstName,\r\n  lastName,\r\n  phoneNo,\r\n  address,\r\n  country,\r\n  state,\r\n  policeStationRange,\r\n  district,\r\n  workState,\r\n  workPoliceStationRange,\r\n  workDistrict\r\n}) => (dispatch, getState) => {\r\n  // Request Body\r\n  const body = JSON.stringify({\r\n    username,\r\n    email,\r\n    password,\r\n    post,\r\n    firstName,\r\n    lastName,\r\n    phoneNo,\r\n    address,\r\n    country,\r\n    state,\r\n    policeStationRange,\r\n    district,\r\n    workState,\r\n    workPoliceStationRange,\r\n    workDistrict\r\n  });\r\n  console.log(body);\r\n\r\n  axios\r\n    .post(\r\n      \"https://store-our.herokuapp.com/api/auth/profileRegister\",\r\n      body,\r\n      tokenConfig(getState)\r\n    )\r\n    .then(res => {\r\n      console.log(res);\r\n      dispatch({\r\n        type: REGISTER_SUCCESS\r\n      });\r\n    })\r\n    .catch(err => {\r\n      const errors = {\r\n        msg: err.response.data,\r\n        status: err.response.status\r\n      };\r\n      dispatch({\r\n        type: REGISTER_FAIL,\r\n        payload: errors\r\n      });\r\n    });\r\n};\r\n\r\n//LOGOUT\r\nexport const logout = () => (dispatch, getState) => {\r\n  axios\r\n    .post(\"https://store-our.herokuapp.com/api/auth/logout\", null, tokenConfig(getState))\r\n    .then(res => {\r\n      dispatch({\r\n        type: LOGOUT_SUCCESS,\r\n        payload: res.data\r\n      });\r\n    })\r\n    .catch(err => {\r\n      console.log(err);\r\n    });\r\n};\r\n\r\nexport const tokenConfig = getState => {\r\n  //GET TOKEN FROM STATE\r\n  const token = getState().auth.token;\r\n\r\n  //Headers\r\n  const config = {\r\n    headers: {\r\n      \"Content-Type\": \"application/json\"\r\n    }\r\n  };\r\n  //if token , add to header config\r\n  if (token) {\r\n    config.headers[\"Authorization\"] = `Token ${token}`;\r\n  }\r\n  return config;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}